"""
Django settings for trade_remedies_public project..

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import json
import os
import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

root = environ.Path(__file__) - 4
env = environ.Env(DEBUG=(bool, False),)
environ.Env.read_env(f"{root}/local.env")

sentry_sdk.init(
    dsn=os.environ.get("SENTRY_DSN"),
    integrations=[DjangoIntegration()],
    environment=os.environ.get("SENTRY_ENVIRONMENT"),
)

SITE_ROOT = root()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!!!
DEBUG = os.environ.get("DEBUG", "FALSE").upper() == "TRUE"

ALLOWED_HOSTS = os.environ["ALLOWED_HOSTS"].split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "govuk_template_base",
    "govuk_template",
    "govuk_forms",
    "core",
    "registration",
    "feedback",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "trade_remedies_public.middleware.SessionTimeoutMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "trade_remedies_public.middleware.APIUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "trade_remedies_public.middleware.CacheControlMiddleware",
    "trade_remedies_public.middleware.HoldingPageMiddleware",
]

# Add basic authentication if configured
basic_auth_user = os.environ.get("BASIC_AUTH_USER")
if basic_auth_user:
    MIDDLEWARE.append("basicauth.middleware.BasicAuthMiddleware")

ROOT_URLCONF = "trade_remedies_public.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "..", "templates"),],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "govuk_template_base.context_processors.govuk_template_base",
                "trade_remedies_public.context_processors.user_context",
                "trade_remedies_public.context_processors.version_context",
                "trade_remedies_public.context_processors.motd_context",
                "trade_remedies_public.context_processors.cookie_management",
            ],
        },
    },
]

WSGI_APPLICATION = "trade_remedies_public.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_L10N = True

USE_TZ = True

redis_base_uri = json.loads(os.environ.get("VCAP_SERVICES"))["redis"][0]["credentials"]["uri"]
redis_uri = redis_base_uri + "/" + os.environ.get("REDIS_DATABASE_NUMBER")
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": redis_uri,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient",},
    },
}

# Session configuration
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SECURE = os.environ.get("SECURE_COOKIE", "FALSE").upper() == "TRUE"
SESSION_EXPIRE_SECONDS = int(os.environ.get("SESSION_LENGTH_MINUTES") or 15) * 60
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
CSRF_COOKIE_SECURE = os.environ.get("SECURE_CSRF_COOKIE", "FALSE").upper() == "TRUE"
CSRF_COOKIE_HTTPONLY = os.environ.get("CSRF_COOKIE_HTTPONLY", "FALSE").upper() == "TRUE"

# AUTHENTICATION_BACKENDS = ['trade_remedies_public.core.auth.AuthenticationBackend']
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_URL = "/accounts/logout/"
LOGOUT_REDIRECT_URL = "/"
AUTO_LOGIN = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
API_BASE_URL = os.environ.get("API_BASE_URL", "http://localhost:8000")
API_PREFIX = "api/v1"
API_URL = f"{API_BASE_URL}/{API_PREFIX}"
TRUSTED_USER_TOKEN = os.environ.get("HEALTH_CHECK_TOKEN")
ENVIRONMENT_KEY = os.environ.get("ENVIRONMENT_KEY")
USE_2FA = os.environ.get("USE_2FA", "TRUE").upper() == "TRUE"
VERIFY_EMAIL = os.environ.get("VERIFY_EMAIL", "TRUE").upper() == "TRUE"
MANAGED_FEEDBACK_MODELS = False
GOOGLE_ANALYTICS_TAG_MANAGER_ID = os.environ.get("GA_TAG_MANAGER_ID", "GTM-XXXXXX")

PUBLIC_FILE_CACHE_MINUTES = 10

# Max upload size - 2GB
MAX_UPLOAD_SIZE = 2 * (1024 * 1024 * 1024)
AWS_ACCESS_KEY_ID = AWS_S3_ACCESS_KEY_ID = os.environ.get("S3_STORAGE_KEY")
AWS_SECRET_ACCESS_KEY = AWS_S3_SECRET_ACCESS_KEY = os.environ.get("S3_STORAGE_SECRET")
AWS_STORAGE_BUCKET_NAME = os.environ.get("S3_BUCKET_NAME")
AWS_REGION = AWS_S3_REGION_NAME = os.environ.get("AWS_REGION", "eu-west-1")
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_ENCRYPTION = True
AWS_DEFAULT_ACL = None
# S3 client library to use
S3_CLIENT = "boto3"
# S3 Root directory name
S3_DOCUMENT_ROOT_DIRECTORY = "documents"
# Time before S3 download links expire
S3_DOWNLOAD_LINK_EXPIREY_SECONDS = 30
# Asynchronous document uploads/checks
ASYNC_DOC_PREPARE = True
FILE_UPLOAD_HANDLERS = ("s3chunkuploader.file_handler.S3FileUploadHandler",)

if basic_auth_user:
    BASICAUTH_USERS = json.loads(basic_auth_user)

# Add the EU as a country
COUNTRIES_OVERRIDE = {
    "EU": "EU Customs Union",
}

APPEND_SLASH = True
STATIC_URL = "/static/"
STATIC_ROOT = "/home/vcap/app/static"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "..", "govuk_template", "static"),
    os.path.join(BASE_DIR, "..", "templates", "static"),
]
# Django static file storage to use whitenoise
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ACCOUNT_INFO_READ_ONLY = os.environ.get("ACCOUNT_INFO_READ_ONLY", "TRUE").upper() == "TRUE"


RAVEN_CONFIG = {
    "dsn": os.environ.get("SENTRY_DSN"),
    "environment": os.environ.get("SENTRY_ENVIRONMENT"),
}


if not DEBUG:
    # Sentry logging
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "root": {
            "level": "WARNING",
            # 'handlers': ['sentry'],
        },
        "formatters": {
            "verbose": {
                "format": "%(levelname)s %(asctime)s %(module)s "
                "%(process)d %(thread)d %(message)s"
            },
        },
        "handlers": {
            # 'sentry': {
            #     'level': 'WARNING',
            #     'class': (
            #         'raven.contrib.django.raven_compat.handlers.SentryHandler'
            #     ),
            # },
            "console": {"level": "DEBUG", "class": "logging.StreamHandler", "formatter": "verbose"}
        },
        "loggers": {
            "django.db.backends": {"level": "ERROR", "handlers": ["console"], "propagate": False,},
            # 'raven': {
            #     'level': 'DEBUG',
            #     'handlers': ['console'],
            #     'propagate': False,
            # },
            "sentry.errors": {"level": "DEBUG", "handlers": ["console"], "propagate": False,},
        },
    }
