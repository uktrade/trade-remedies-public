"""
Django settings for trade_remedies_public project..

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import json
import os
import sys

import environ
import sentry_sdk
from django_log_formatter_ecs import ECSFormatter
from sentry_sdk.integrations.django import DjangoIntegration

# We use django-environ but do not read a `.env` file. Locally we feed
# docker-compose an environment from a local.env file in the project root.
# In our PaaS the service's environment is supplied from Vault.
#
# NB: Some settings acquired using `env()` deliberately *do not* have defaults
# as we want to get an `ImproperlyConfigured` exception to avoid a badly
# configured deployment.
root = environ.Path(__file__) - 4
env = environ.Env(
    DEBUG=(bool, False),
)

sentry_sdk.init(
    dsn=env("SENTRY_DSN", default=""),
    integrations=[DjangoIntegration()],
    environment=env("SENTRY_ENVIRONMENT", default="local"),
)

SITE_ROOT = root()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!!!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost"])

ORGANISATION_NAME = env("ORGANISATION_NAME", default="Organisation name placeholder")

ORGANISATION_INITIALISM = env("ORGANISATION_INITIALISM", default="PLACEHOLDER")

# Application definition
INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "govuk_template_base",
    "govuk_forms",
    "django_chunk_upload_handlers",
    "core",
    "registration",
    "feedback",
    "sass_processor",
    "django_countries",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "config.middleware.SessionTimeoutMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # "config.middleware.PublicRequestMiddleware",
    "config.middleware.APIUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "config.middleware.CacheControlMiddleware",
    "config.middleware.HoldingPageMiddleware",
    "config.middleware.SentryContextMiddleware",
    "csp.middleware.CSPMiddleware",
]

# Add basic authentication if configured
basic_auth_user = env("BASIC_AUTH_USER", default=False)
if basic_auth_user:
    MIDDLEWARE.append("basicauth.middleware.BasicAuthMiddleware")

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "..", "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "govuk_template_base.context_processors.govuk_template_base",
                "config.context_processors.user_context",
                "config.context_processors.version_context",
                "config.context_processors.motd_context",
                "config.context_processors.cookie_management",
                "config.context_processors.add_form_errors",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Europe/London"
USE_I18N = True
USE_L10N = True
USE_TZ = True

_VCAP_SERVICES = env.json("VCAP_SERVICES", default={})

# Redis - Trade remedies uses different redis database numbers for the Django Cache
# API:        0
# Caseworker: 1
# Public:     2
REDIS_DATABASE_NUMBER = env("REDIS_DATABASE_NUMBER", default=2)
if "redis" in _VCAP_SERVICES:
    REDIS_BASE_URL = _VCAP_SERVICES["redis"][0]["credentials"]["uri"]
else:
    REDIS_BASE_URL = env("REDIS_BASE_URL", default="redis://redis:6379")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_BASE_URL}/{REDIS_DATABASE_NUMBER}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

# Session configuration
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SECURE = env("SECURE_COOKIE", default=False)
SESSION_EXPIRE_SECONDS = env("SESSION_LENGTH_MINUTES", default=30) * 60
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
CSRF_COOKIE_SECURE = env("SECURE_CSRF_COOKIE", default=False)
CSRF_COOKIE_HTTPONLY = env("CSRF_COOKIE_HTTPONLY", default=False)
USE_2FA = os.environ.get("USE_2FA", "TRUE").upper() == "TRUE"
VERIFY_EMAIL = os.environ.get("VERIFY_EMAIL", "TRUE").upper() == "TRUE"
MANAGED_FEEDBACK_MODELS = False
GOOGLE_ANALYTICS_TAG_MANAGER_ID = os.environ.get("GA_TAG_MANAGER_ID", "GTM-XXXXXX")
PUBLIC_FILE_CACHE_MINUTES = 10

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_URL = "/accounts/logout/"
LOGOUT_REDIRECT_URL = "/"
AUTO_LOGIN = True

API_BASE_URL = env("API_BASE_URL", default="http://localhost:8000")
API_PREFIX = "api/v1"
API_URL = f"{API_BASE_URL}/{API_PREFIX}"
HEALTH_CHECK_TOKEN = env("HEALTH_CHECK_TOKEN")
ENVIRONMENT_KEY = env("ENVIRONMENT_KEY", default="PUB-ENV")
APPEND_SLASH = True

AWS_ACCESS_KEY_ID = AWS_S3_ACCESS_KEY_ID = env("S3_STORAGE_KEY", default=None)
AWS_SECRET_ACCESS_KEY = AWS_S3_SECRET_ACCESS_KEY = env("S3_STORAGE_SECRET", default=None)
AWS_STORAGE_BUCKET_NAME = env("S3_BUCKET_NAME", default=None)
AWS_S3_REGION_NAME = AWS_REGION = env("AWS_REGION", default="eu-west-1")
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_ENCRYPTION = True
AWS_DEFAULT_ACL = None
# S3 client library to use
S3_CLIENT = "boto3"
# S3 Root directory name
S3_DOCUMENT_ROOT_DIRECTORY = "documents"

CLAM_AV_USERNAME = env("CLAM_AV_USERNAME", default=None)
CLAM_AV_PASSWORD = env("CLAM_AV_PASSWORD", default=None)
CLAM_AV_DOMAIN = env("CLAM_AV_DOMAIN", default=None)

FILE_UPLOAD_HANDLERS = (
    "django_chunk_upload_handlers.clam_av.ClamAVFileUploadHandler",
    "django_chunk_upload_handlers.s3.S3FileUploadHandler",
)  # Order is important

if basic_auth_user:
    BASICAUTH_USERS = json.loads(basic_auth_user)

# Add the EU as a country
COUNTRIES_OVERRIDE = {
    "EU": "EU Customs Union",
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# Static
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "sass_processor.finders.CssFinder",
]

SASS_PROCESSOR_FAIL_SILENTLY = False
SASS_PROCESSOR_ENABLED = True
SASS_PROCESSOR_AUTO_INCLUDE = False

# Static files (CSS, JavaScript, Images)
STATIC_ROOT = os.path.abspath(os.path.join(BASE_DIR, "..", "static"))
STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "..", "templates", "static"),
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{asctime} {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "stdout": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["stdout"],
        "level": env("ROOT_LOG_LEVEL", default="INFO"),
    },
    "loggers": {
        "django": {
            "handlers": [
                "stdout",
            ],
            "level": env("DJANGO_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
        "django.server": {
            "handlers": [
                "stdout",
            ],
            "level": env("DJANGO_SERVER_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
        "django.request": {
            "handlers": [
                "stdout",
            ],
            "level": env("DJANGO_REQUEST_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
    },
}

ENVIRONMENT_LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "ecs_formatter": {
            "()": ECSFormatter,
        },
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "handlers": {
        "ecs": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "ecs_formatter",
        },
    },
    "root": {
        "handlers": [
            "ecs",
        ],
        "level": env("ROOT_LOG_LEVEL", default="INFO"),
    },
    "loggers": {
        "django": {
            "handlers": [
                "ecs",
            ],
            "level": env("DJANGO_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
        "django.server": {
            "handlers": [
                "ecs",
            ],
            "level": env("DJANGO_SERVER_LOG_LEVEL", default="ERROR"),
            "propagate": False,
        },
        "django.request": {
            "handlers": [
                "ecs",
            ],
            "level": env("DJANGO_REQUEST_LOG_LEVEL", default="ERROR"),
            "propagate": False,
        },
    },
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

COUNTRIES_FIRST = ["GB"]
COUNTRIES_FIRST_BREAK = "------"

FILE_MAX_SIZE_BYTES = 30000000
FILE_DISALLOWED_EXTENSIONS = [
    "com",
    "exe",
    "dmg",
    "bat",
    "js",
    "php",
    "py",
    "ps",
    "sh",
]
